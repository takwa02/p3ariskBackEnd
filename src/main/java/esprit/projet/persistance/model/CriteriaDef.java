package esprit.projet.persistance.model;
// Generated 30 aoï¿½t 2020 13:08:24 by Hibernate Tools 4.3.5.Final

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * CriteriaDef generated by hbm2java
 */
@Entity
@Table(name = "CRITERIA_DEF",schema = "p3arisk")
public class CriteriaDef implements java.io.Serializable {

	private BigDecimal criteriaId;
	private String critName;
	private String critDesc;
	private Character critType;
	private String sqlQuery;
	private Set<CriteriaScore> criteriaScores = new HashSet<CriteriaScore>(0);
	private Set<AnnualCriteria> annualCriterias = new HashSet<AnnualCriteria>(0);
	
	  @Transient
		private String lastcriteriaYear;
	    
	   @Transient
		public String getLastcriteriaYear() {
			
			//.get();
			if(annualCriterias.stream().map(ac->ac.getCriteriaYear()).max((i,j)->i.compareTo(j)).isPresent()) {
				
			lastcriteriaYear=""+annualCriterias.stream().map(ac->ac.getCriteriaYear()).max((i,j)->i.compareTo(j)).get();
		
			
			}else
				lastcriteriaYear="";	
			return lastcriteriaYear;
		}

	
	public CriteriaDef() {
	}

	public CriteriaDef(BigDecimal criteriaId) {
		this.criteriaId = criteriaId;
	}

	public CriteriaDef(BigDecimal criteriaId, String critName, String critDesc, Character critType, String sqlQuery,
			Set<CriteriaScore> criteriaScores, Set<AnnualCriteria> annualCriterias) {
		this.criteriaId = criteriaId;
		this.critName = critName;
		this.critDesc = critDesc;
		this.critType = critType;
		this.sqlQuery = sqlQuery;
		this.criteriaScores = criteriaScores;
		this.annualCriterias = annualCriterias;
	}

	@Id

	@Column(name = "CRITERIA_ID", unique = true, nullable = false, precision = 22, scale = 0)
	public BigDecimal getCriteriaId() {
		return this.criteriaId;
	}

	public void setCriteriaId(BigDecimal criteriaId) {
		this.criteriaId = criteriaId;
	}

	@Column(name = "CRIT_NAME", length = 50)
	public String getCritName() {
		return this.critName;
	}

	public void setCritName(String critName) {
		this.critName = critName;
	}

	@Column(name = "CRIT_DESC")
	public String getCritDesc() {
		return this.critDesc;
	}

	public void setCritDesc(String critDesc) {
		this.critDesc = critDesc;
	}

	@Column(name = "CRIT_TYPE", length = 1)
	public Character getCritType() {
		return this.critType;
	}

	public void setCritType(Character critType) {
		this.critType = critType;
	}

	@Column(name = "SQL_QUERY", length = 0)
	public String getSqlQuery() {
		return this.sqlQuery;
	}

	public void setSqlQuery(String sqlQuery) {
		this.sqlQuery = sqlQuery;
	}
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "criteriaDef")
	public Set<CriteriaScore> getCriteriaScores() {
		return this.criteriaScores;
	}

	public void setCriteriaScores(Set<CriteriaScore> criteriaScores) {
		this.criteriaScores = criteriaScores;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "criteriaDef")
	public Set<AnnualCriteria> getAnnualCriterias() {
		return this.annualCriterias;
	}

	public void setAnnualCriterias(Set<AnnualCriteria> annualCriterias) {
		this.annualCriterias = annualCriterias;
	}


	@Override
	public String toString() {
		return "CriteriaDef [criteriaId=" + criteriaId + ", critName=" + critName + ", critDesc=" + critDesc
				+ ", critType=" + critType + ", sqlQuery=" + sqlQuery + ", lastcriteriaYear=" + lastcriteriaYear + "]";
	}

}
